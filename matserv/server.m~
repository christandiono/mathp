% SERVER Write a message over the specified port
% 
% Usage - server(output_port, number_of_retries)
function server(output_port, number_of_retries)

    import java.net.ServerSocket
    import java.io.*

    if (nargin < 2)
        number_of_retries = 20; % set to -1 for infinite
    end
    retry             = 0;

    server_socket  = [];
    output_socket  = [];

    while true

        retry = retry + 1;

        %try
            if ((number_of_retries > 0) && (retry > number_of_retries))
                fprintf(1, 'Too many retries\n');
                break;
            end

            %fprintf(1, ['Try %d waiting for client to connect to this ' ...
            %            'host on port : %d\n'], retry, output_port);

            % wait for 10 second for client to connect server socket
            try
                server_socket = ServerSocket(output_port);

                server_socket.setSoTimeout(10000);

                output_socket = server_socket.accept;
            
                input_stream=output_socket.getInputStream;
                temp=InputStreamReader(input_stream);
                in=BufferedReader(temp);

                %fprintf(1, 'Client connected\n');

                line=char(in.readLine());
                linenumber=1;
                HttpRequest{1}=line;
                while line
                    line=char(in.readLine());
                    linenumber=linenumber+1;
                    HttpRequest{linenumber}=line;               
                end
            end

            if exist('HttpRequest','var')
                disp([date(now) HttpRequest{1})
                message=process_request(HttpRequest);
                clear HttpRequest
            end

            try
                output_stream   = output_socket.getOutputStream;
                d_output_stream = DataOutputStream(output_stream);

                % output the data over the DataOutputStream
                % Convert to stream of bytes
                %fprintf(1, 'Writing %d bytes\n', length(message))
                d_output_stream.writeBytes(char(message));
                d_output_stream.flush;

                % clean up
                server_socket.close;
                output_socket.close;
                %break;
            end
        %catch
            if ~isempty(server_socket)
                server_socket.close
            end

            if ~isempty(output_socket)
                output_socket.close
            end

            % pause before retrying
            %pause(1);
        %end
    end
end